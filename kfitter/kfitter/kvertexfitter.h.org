//
// $Id: kvertexfitter.h 9932 2006-11-12 14:26:53Z katayama $
//
// $Log$
// Revision 1.18  2002/06/10 14:04:18  sumisawa
// add functions which return modified chi2 (add functions with suffix "_woip")
//
// Revision 1.17  2002/06/04 12:56:05  sumisawa
// add functions which return modified chi2
//
// Revision 1.16  2002/03/27 23:42:30  jtanaka
// Add new fitter to the mass-constraint fit.
//
// Revision 1.15  2000/04/24 09:29:24  jtanaka
// bug fix : calculation of each tracks in fit3() of kvertexfitter.
// add vertexChisq() function.
//
// Revision 1.14  2000/03/07 17:09:14  jtanaka
// bug fixed, use "similarity" etc.
//
// Revision 1.13  2000/03/07 10:52:38  katayama
// compatibility with CC5.0
//
// Revision 1.12  1999/12/10 15:50:11  jtanaka
// add refitter for slowpion to kvertexfitter and BF is changed sligthly
//
// Revision 1.11  1999/07/19 18:06:56  jtanaka
// bug fix : chisq
//
// Revision 1.10  1999/07/19 15:58:35  jtanaka
// added Mdst_charged
//
// Revision 1.9  1999/06/20 06:30:13  jtanaka
// added beam position fit
//
// Revision 1.8  1999/05/26 12:02:29  jtanaka
// speed up etc.
//
// Revision 1.7  1999/03/29 05:38:19  jtanaka
// new class structure, new+old interfaces
//
// Revision 1.6  1998/09/28 13:26:08  jtanaka
// bug fix in kmakemother.h and <vector.h> -> <vector>
//
// Revision 1.5  1998/09/08 11:52:08  jtanaka
// non-const --> const
//
// Revision 1.4  1998/07/23 11:58:04  jtanaka
// endif HEADER --> endif /* HEADER */
//
// Revision 1.3  1998/01/22 03:21:41  jtanaka
// Updated from Tanaka san. New Interface etc.
//
// Revision 1.2  1997/10/24 07:05:10  katayama
// Updated from Tanaka san. Bug fixes etc.
//
//
// kvertexfitter of KFitter
//
// ver2.0  : 1998/01
// ver3.0  : 1999/03
//
// author  : jtanaka
// e-mail  : jtanaka@hep.phys.s.u-tokyo.ac.jp
//
#ifndef KVERTEXFITTER_H
#define KVERTEXFITTER_H
#include "belle.h"
#include "kfitter/kfitterbase2.h"
#if defined(BELLE_NAMESPACE)
namespace Belle {
#endif

class kvertexfitter : public kfitterbase2 {
public:
  kvertexfitter(void);
  ~kvertexfitter(void);

// wrapped by T.H 2006/05/10 for ip tube
  unsigned fit(void);  // large Matrix
  unsigned fit2(void); // small Matrix
  unsigned fit3(void); // small Matrix + Beam Position
  unsigned fit4(void); // small Matrix + known Vertex : for mainly slow pion

private: // modified by T.H 2006/05/10
  unsigned _fit(void);  // large Matrix
  unsigned _fit2(void); // small Matrix
  unsigned _fit3(void); // small Matrix + Beam Position
  unsigned _fit4(void); // small Matrix + known Vertex : for mainly slow pion
public:

  //input interface
  void initialVertex(const HepPoint3D&);
  unsigned mode(const unsigned);
  void beamProfile(const HepSymMatrix&);
  void vertexProfile(const HepSymMatrix&); // = beamProfile
	void tubeProfile(const kfitterparticle&); // added by T.H 2006/05/09
	void knownVertex(void);

private: // added by T.H 2006/05/10
  void addTube(void);
	void delTube(void);
public:

  //output interface
  HepPoint3D   vertex(const unsigned = KF_AFTER_FIT);
  HepSymMatrix errVertex(void);
  HepMatrix    errVertexTrack(const unsigned);
  unsigned     mode(void);
  double       chisq(void);
  double       chisq(const unsigned);
  double       vertexChisq(void);

#if KF_WITH_OLD_INTERFACE
  void set_initial_vertex(const Hep3Vector &v){ initialVertex(static_cast<const HepPoint3D&>(v)); }
  void set_initial_vertex(double x,double y,double z)
    { HepPoint3D t(x,y,z); initialVertex(t); }

  Hep3Vector        get_vertex(){ return static_cast<Hep3Vector>(vertex()); }
  double            get_vx()    { return vertex().x(); }
  double            get_vy()    { return vertex().y(); }
  double            get_vz()    { return vertex().z(); }
  HepSymMatrix      get_err_vertex(){ return errVertex(); }
  double            get_err_vertex(int i,int j){ return errVertex()[i][j]; }
  HepMatrix         get_err_vertex_track(int i){ return errVertexTrack(i); }
#endif //KF_WITH_OLD_INTERFACE

// Add by T.N (2002/05/14)
  double trackchisq(const unsigned int n,
                    const bool usex=false, const bool usey=false, const bool usez=true);
  double chisq_wo_ip(const bool usex=false, const bool usey=false, const bool usez=true,
                     const bool dont_use_chash = false);
  unsigned dgf_wo_ip(const bool usex=false, const bool usey=false, const bool usez=true);
  double cl_wo_ip(const bool usex=false, const bool usey=false, const bool usez=true);

  double chisq_woip(const bool usex=false, const bool usey=false, const bool usez=true,
		    const bool dont_use_chash = false){
    return chisq_wo_ip(usex, usey, usez, dont_use_chash);
  }
  unsigned dgf_woip(const bool usex=false, const bool usey=false, const bool usez=true){
    return  dgf_wo_ip(usex, usey, usez);
  }
  double cl_woip(const bool usex=false, const bool usey=false, const bool usez=true){
    return cl_wo_ip(usex, usey, usez);
  }

	// backward compatibility up to 2005summer (T.H 2006/06/16)
  double chisq_wo_ip_2005summer(const bool usex=false, const bool usey=false, const bool usez=true,
                     const bool dont_use_chash = false);
  unsigned dgf_wo_ip_2005summer(const bool usex=false, const bool usey=false, const bool usez=true);
  double cl_wo_ip_2005summer(const bool usex=false, const bool usey=false, const bool usez=true);

  double chisq_woip_2005summer(const bool usex=false, const bool usey=false, const bool usez=true,
		    const bool dont_use_chash = false){
    return chisq_wo_ip_2005summer(usex, usey, usez, dont_use_chash);
  }
  unsigned dgf_woip_2005summer(const bool usex=false, const bool usey=false, const bool usez=true){
    return  dgf_wo_ip_2005summer(usex, usey, usez);
  }
  double cl_woip_2005summer(const bool usex=false, const bool usey=false, const bool usez=true){
    return cl_wo_ip_2005summer(usex, usey, usez);
  }

private:
  //mode
  unsigned m_mode;
  double *m_eachChisq;
  double m_vertexChisq;

  //before fitting
  HepPoint3D m_vertex_b;

  //after fitting
  HepPoint3D   m_vertex_a;
  HepSymMatrix m_errVertex_a;
  std::vector<HepMatrix> m_errVertexTrack_a;
  
  //input functions
  unsigned m_setInputMatrix(void);
  unsigned m_setInputSubMatrix(void);

  //output functions
  unsigned m_setOutputMatrix(void);

  //fit functions
  unsigned m_makeCoreMatrix(void);
  unsigned m_calDgf(void);

  // beam profile
  HepSymMatrix m_errBeam;
  unsigned m_beam;

  // known vertex
  unsigned m_knownVertex;

  // tube profile (added by T.H 2006/05/09)
	bool m_tube;
	int m_itrk_tube; // holds tube track index in m_plist[]
  kfitterparticle m_tube_track; // holds tube "track"
};
#if defined(BELLE_NAMESPACE)
} // namespace Belle
#endif
#endif /* KVERTEXFITTER_H */
